#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>

BEGIN
{
	printf("mkdir() and vfs_mkdir():\n");
	printf("%-15s %-10s %-6s %-6s %-10s %-8s", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "MODE");
	printf("%-8s %s\n", "LAT(ns)", "FILENAME");

	printf("rmdir() and vfs_rmdir():\n");
	printf("%-15s %-10s %-6s %-6s %-10s", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION");
	printf("%-8s %s\n", "LAT(ns)", "FILENAME");

	printf("create():\n");
	printf("%-15s %-10s %-6s %-6s %-10s", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION");
	printf("%-5s %s\n", "MODE", "FILENAME");

	printf("vfs_create():\n");
	printf("%-15s %-10s %-6s %-6s %-10s", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION");
	printf("%-5s %-3s %-8s %s\n", "MODE", "RET", "LAT(ns)", "FILENAME");

	printf("unlink() and vfs_unlink():\n");
	printf("%-15s %-10s %-6s %-6s %-10s ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION");
	printf("%-8s %s\n", "LAT(ns)", "FILENAME");
}

// ************************************************************
// 	CREATE DIRECTORIES
// ************************************************************

// mkdir() syscall contains the full path
// tracepoint:syscalls:sys_enter_mkdir
//     int __syscall_nr;
//     const char * pathname;
//     umode_t mode;			unsigned short
tracepoint:syscalls:sys_enter_mkdir
/ comm == "python" /
{
	@tmkdstart[tid] = nsecs;
	@tmkdpath[tid] = str(args->pathname);
	@tmkdmode[tid] = args->mode;
}
tracepoint:syscalls:sys_exit_mkdir
/ @tmkdstart[tid] /
{	
	$now = nsecs;
	$latency = $now - @tmkdstart[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-8hu %-8d %s\n",
		"mkdir()", 
		@tmkdmode[tid],
		$latency, 
		@tmkdpath[tid]);

	delete(@tmkdstart[tid]);
	delete(@tmkdpath[tid]);
	delete(@tmkdmode[tid]);
}

//int vfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
kprobe:vfs_mkdir
/ comm == "python" /
{
	$dentry = (struct dentry *) arg1;
	@mkd_start[tid] = nsecs;
	@mkd_name[tid] = $dentry->d_name.name;
	@mkd_mode[tid] = arg2;
}
kretprobe:vfs_mkdir
/ @mkd_start[tid] /
{
	$now = nsecs;
	$latency = $now - @mkd_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-8hu %-10d %s\n",
		"vfs_mkdir()", 
		@mkd_mode[tid], 
		$latency, 
		str(@mkd_name[tid]));

	delete(@mkd_start[tid]);
	delete(@mkd_name[tid]);
	delete(@mkd_mode[tid]);
}


// ************************************************************
// 	REMOVE DIRECTORIES
// ************************************************************

// tracepoint:syscalls:sys_enter_rmdir
//     int __syscall_nr;
//     const char * pathname;
tracepoint:syscalls:sys_enter_rmdir
/ comm == "python" /
{
	@rmdir_start[tid] = nsecs;
	@rmdir_path[tid] = str(args->pathname);
}
tracepoint:syscalls:sys_exit_rmdir
/ @rmdir_start[tid] /
{	
	$now = nsecs;
	$latency = $now - @rmdir_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-8d %s\n",
		"rmdir()", 
		$latency, 
		@rmdir_path[tid]);

	delete(@rmdir_start[tid]);
	delete(@rmdir_path[tid]);
}


// int vfs_rmdir(struct user_namespace *mnt_userns, struct inode *dir,
// 		     	struct dentry *dentry)
kprobe:vfs_rmdir
/ comm == "python" /
{
	$dentry = (struct dentry *)arg2;
	@rmd_start[tid] = nsecs;
	@rmd_name[tid] = str($dentry->d_name.name);
}
kretprobe:vfs_rmdir
/ @rmd_start[tid] /
{
	$now = nsecs;
	$latency = $now - @rmd_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-12s %-8d %s\n",
			"vfs_rmdir()", 
			$latency, 
			@rmd_name[tid]);

	delete(@rmd_start[tid]);
	delete(@rmd_name[tid]);
}


// ************************************************************
// 	FILE CREATION
// ************************************************************

// Note: It seems usually openat() with O_CREAT is called instead of these functions
tracepoint:syscalls:sys_enter_creat
/ comm == "python" /
{
	printf("%lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-5hu %s\n", 
		"create()", 
		args->mode, 
		str(args->pathname));
}
//int vfs_create(struct user_namespace *mnt_userns, struct inode *dir,
//	       struct dentry *dentry, umode_t mode, bool want_excl)
//  * @mnt_userns:	user namespace of the mount the inode was found from
//  * @dir:	inode of @dentry
//  * @dentry:	pointer to dentry of the base directory
//  * @mode:	mode of the new file
//  * @want_excl:	whether the file must not yet exist
// Returns error code
kprobe:vfs_create
/ comm == "python"/
{
	@cstart[tid] = nsecs;
	$dentry = (struct dentry *)arg2;
	@cfn[tid] = str($dentry->d_name.name);
	@cmod[tid] = arg3;
}
kretprobe:vfs_create
/@cstart[tid]/
{
	$now = nsecs;
	$latency = $now - @cstart[tid];
	
	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-8d %-4d %-8d %s\n", 
		"vfs_create",
		@cmod[tid],
		retval,
		$latency,
		@cfn[tid]
	);

	delete(@cstart[tid]);
	delete(@cmod[tid]);
	delete(@cfn[tid]);
}


// ************************************************************
// 	FILE DELETION
// ************************************************************
// tracepoint:syscalls:sys_enter_unlink
//     int __syscall_nr;
//     const char * pathname;
tracepoint:syscalls:sys_enter_unlink
/ comm == "python" /
{
	@unlnk_start[tid] = nsecs;
	@unlnk_fn[tid] = str(args->pathname);
}
tracepoint:syscalls:sys_enter_unlink
/ @unlnk_start[tid] /
{
	$now = nsecs;
	$latency = $now - @unlnk_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-8d %s\n", 
		"unlink()", 
		$latency,
		@unlnk_fn[tid]
	);

	delete(@unlnk_start[tid]);
	delete(@unlnk_fn[tid]);
}

// int vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir,
// 	       struct dentry *dentry, struct inode **delegated_inode)
kprobe:vfs_unlink
/ comm == "python" /
{
	@v_unlnk_start[tid] = nsecs;
	$dentry = (struct dentry *)arg1;
	@v_unlnk_fn[tid] = str($dentry->d_name.name);
}
kretprobe:vfs_unlink
/ @v_unlnk_start[tid] /
{
	$now = nsecs;
	$latency = $now - @unlnk_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-8d %s\n", 
		"vfs_unlink",
		$latency,
		@v_unlnk_fn[tid]
	);
	
	delete(@v_unlnk_start[tid]);
	delete(@v_unlnk_fn[tid]);
}


// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@tmkdstart);
	clear(@tmkdpath);
	clear(@tmkdmode);

	clear(@mkd_start);
	clear(@mkd_name);
	clear(@mkd_mode);

	clear(@rmdir_start);
	clear(@rmdir_path);

	clear(@rmd_start);
	clear(@rmd_name);

	clear(@unlnk_start);
	clear(@unlnk_fn);
	clear(@v_unlnk_start);
	clear(@v_unlnk_fn);
}
