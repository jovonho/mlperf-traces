#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>

BEGIN
{
	printf("mkdir():\n");
	printf("%-17s %-8s %-6s %-6s %-10s %-8s", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "MODE");
	printf("%-8s %s\n", "LAT(ns)", "FILENAME");

	printf("rmdir():\n");
	printf("%-17s %-8s %-6s %-6s %-10s", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION");
	printf("%-8s %s\n", "LAT(ns)", "FILENAME");

	printf("unlink():\n");
	printf("%-15s %-10s %-6s %-6s %-10s ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION");
	printf("%-8s %s %s\n", "LAT(ns)", "FILENAME", "FULLPATH");
}

// ************************************************************
// 	CREATE DIRECTORIES
// ************************************************************

// mkdir() syscall contains the full path
// tracepoint:syscalls:sys_enter_mkdir
//     int __syscall_nr;
//     const char * pathname;
//     umode_t mode;				(unsigned short)
tracepoint:syscalls:sys_enter_mkdir
/ comm == "python" /
{
	@mkdir_start[tid] = nsecs;
	@mkdir_path[tid] = str(args->pathname);
	@mkdir_mode[tid] = args->mode;
}
tracepoint:syscalls:sys_exit_mkdir
/ @mkdir_start[tid] /
{	
	$now = nsecs;
	$latency = $now - @mkdir_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S ");
	printf("%-6d %-6d ", pid, tid);

	printf("%-10s %-8hu %-8d %s\n",
		"mkdir()", 
		@mkdir_mode[tid],
		$latency, 
		@mkdir_path[tid]);

	delete(@mkdir_start[tid]);
	delete(@mkdir_path[tid]);
	delete(@mkdir_mode[tid]);
}

// ************************************************************
// 	REMOVE DIRECTORIES
// ************************************************************

// tracepoint:syscalls:sys_enter_rmdir
//     int __syscall_nr;
//     const char * pathname;
tracepoint:syscalls:sys_enter_rmdir
/ comm == "python" /
{
	@rmdir_start[tid] = nsecs;
	@rmdir_path[tid] = str(args->pathname);
}
tracepoint:syscalls:sys_exit_rmdir
/ @rmdir_start[tid] /
{	
	$now = nsecs;
	$latency = $now - @rmdir_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-8d %s\n",
		"rmdir()", 
		$latency, 
		@rmdir_path[tid]);

	delete(@rmdir_start[tid]);
	delete(@rmdir_path[tid]);
}

// ************************************************************
// 	FILE DELETION
// ************************************************************
// tracepoint:syscalls:sys_enter_unlink
//     int __syscall_nr;
//     const char * pathname;
tracepoint:syscalls:sys_enter_unlink
/ comm == "python" /
{
	@unlnk_start[tid] = nsecs;
	@unlnk_fullpath[tid] = str(args->pathname);
}

// int vfs_unlink(struct user_namespace *mnt_userns, struct inode *dir,
// 	       struct dentry *dentry, struct inode **delegated_inode)
kprobe:vfs_unlink
/ @unlnk_start[tid] /
{
	$dentry = (struct dentry *)arg2;
	@unlnk_filename[tid] = str($dentry->d_name.name);
}

tracepoint:syscalls:sys_enter_unlink
/ @unlnk_start[tid] /
{
	$now = nsecs;
	$latency = $now - @unlnk_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S ");
	printf("%-6d %-6d" , pid, tid);

	printf("%-10s %-8d %s %s\n", 
		"unlink()", 
		$latency,
		@unlnk_filename[tid],
		@unlnk_fullpath[tid]
	);

	delete(@unlnk_start[tid]);
	delete(@unlnk_filename[tid]);
	delete(@unlnk_fullpath[tid]);
}



// ************************************************************
// 	FILE CREATION
// ************************************************************

// Note: I have never seen create() being called
// It seems usually openat() with O_CREAT is called instead of it
tracepoint:syscalls:sys_enter_creat
/ comm == "python" /
{
	printf("%lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s %-5hu %s\n", 
		"create()", 
		args->mode, 
		str(args->pathname));
}
// //int vfs_create(struct user_namespace *mnt_userns, struct inode *dir,
// //	       struct dentry *dentry, umode_t mode, bool want_excl)
// //  * @mnt_userns:	user namespace of the mount the inode was found from
// //  * @dir:	inode of @dentry
// //  * @dentry:	pointer to dentry of the base directory
// //  * @mode:	mode of the new file
// //  * @want_excl:	whether the file must not yet exist
// // Returns error code
// kprobe:vfs_create
// / comm == "python"/
// {
// 	@cstart[tid] = nsecs;
// 	$dentry = (struct dentry *)arg2;
// 	@cfn[tid] = str($dentry->d_name.name);
// 	@cmod[tid] = arg3;
// }
// kretprobe:vfs_create
// /@cstart[tid]/
// {
// 	$now = nsecs;
// 	$latency = $now - @cstart[tid];
	
// 	printf("%lu ", $now);
// 	time("%H:%M:%S  ");
// 	printf("%-6d %-6d", pid, tid);

// 	printf("%-10s %-8d %-4d %-8d %s\n", 
// 		"vfs_create",
// 		@cmod[tid],
// 		retval,
// 		$latency,
// 		@cfn[tid]
// 	);

// 	delete(@cstart[tid]);
// 	delete(@cmod[tid]);
// 	delete(@cfn[tid]);
// }

// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@mkdir_start);
	clear(@mkdir_path);
	clear(@mkdir_mode);

	clear(@rmdir_start);
	clear(@rmdir_path);

	clear(@unlnk_start);
	clear(@unlnk_fullpath);
	clear(@unlnk_filename);
}
