#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>


BEGIN
{
	printf("%-17s %-6s %-5s %-8s %s %s", "TIMESTAMP", "PID", "FD", "LAT(ns)", "FILENAME", "FULLPATH");
}

// ************************************************************
// 	FILE OPENING
// ************************************************************

// tracepoint:syscalls:sys_enter_openat
//     int __syscall_nr;
//     int dfd;
//     const char * filename;
//     int flags;
//     umode_t mode;
tracepoint:syscalls:sys_enter_openat	
/ comm == "python" /
{
	@o_start[tid] = nsecs;
	@o_flags[tid] = args->flags;
	@o_mode[tid] = args->mode;
	@o_fullpath[tid] = str(args->filename);
}

// int vfs_open(const struct path *path, struct file *file)
kprobe:vfs_open
/ @o_start[tid] /
{
	@o_filename[tid] = str(((struct path *)arg0)->dentry->d_name.name);
}

tracepoint:syscalls:sys_exit_openat
/ @o_start[tid] /
{
	$now = nsecs;
	$latency = $now - @o_start[tid];

	printf("%-17lu %-6d %-5d %-8d %s %s\n",
		$now, 
		pid,
		args->ret,			// the file descriptor
		$latency,
		@o_filename[tid],
		@o_fullpath[tid]
	);

	delete(@o_start[tid]);
	delete(@o_flags[tid]);
	delete(@o_mode[tid]);
	delete(@o_filename[tid]);
	delete(@o_fullpath[tid]);
}

// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@o_start);
	clear(@o_flags);
	clear(@o_mode);
	clear(@o_fullpath);
	clear(@o_filename);

}
