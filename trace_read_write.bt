#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>


BEGIN
{
	printf("read():\n");
	printf("%-15s %-10s %-6s %-6s %-10s %-4d ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "FD");
	printf("%-8s %-8s %-8s\n", "REQ (B)", "RET (B)", "LAT(ns)");

	printf("vfs_read():\n");
	printf("%-15s %-10s %-6s %-6s %-10s %-12s ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "ADDRESS");
	printf("%-8s %-8s %-8s %-8s %s\n", "OFFSET", "REQ (B)", "REQ (B)", "LAT(ns)", "FILENAME");


	printf("write():\n");
	printf("%-15s %-10s %-6s %-6s %-10s %-4d ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "FD");
	printf("%-8s %-8s %-8s\n", "REQ (B)", "RET (B)", "LAT(ns)");

	printf("vfs_read():\n");
	printf("%-15s %-10s %-6s %-6s %-10s %-12s ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "ADDRESS");
	printf("%-8s %-8s %-8s %-8s %s\n", "OFFSET", "REQ (B)", "REQ (B)", "LAT(ns)", "FILENAME");
}


// ************************************************************
// 	FILE READING
// ************************************************************

// tracepoint:syscalls:sys_enter_read
//     int __syscall_nr;
//     unsigned int fd;
//     char * buf;
//     size_t count;
tracepoint:syscalls:sys_enter_read
/ comm == "python" /
{
	@sys_read_start[tid] = nsecs;
	@sys_read_fd[tid] = args->fd; 
	@sys_read_count[tid] = args->count;
}
// tracepoint:syscalls:sys_exit_read
//     int __syscall_nr;
//     long ret;
tracepoint:syscalls:sys_exit_read
/ comm == "python" /
{
	$now = nsecs;
	$latency = $now - @sys_read_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-8s %-4d %-8d %-8d %-10d\n", 
		"read()",
		@sys_read_fd[tid],
		@sys_read_count[tid], 
		args->ret,
		$latency
	);
	delete(@sys_read_start[tid]);
	delete(@sys_read_fd[tid]);
	delete(@sys_read_count[tid]);
}

// ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_read
/ comm == "python"/
{
	@vr_start[tid] = nsecs;
	@vr_buf[tid] = arg1;
	@vr_req[tid] = arg2;
	@vr_off[tid] = *arg3;
	@vr_fn[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}
kretprobe:vfs_read
/ @vr_start[tid] /
{
	$now = nsecs;
	$latency = $now - @vr_start[tid];
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s 0x%lx %-8d %-10d ", 
		"vfs_read()",
		@vr_buf[tid],
		@vr_off[tid],
		@vr_req[tid]
	);

	printf("%-10d %-10d %s\n", 
		retval, 
		$latency, 
		@vr_fn[tid]);

	delete(@vr_start[tid]);
	delete(@vr_buf[tid]);
	delete(@vr_req[tid]);
	delete(@vr_off[tid]);
	delete(@vr_fn[tid]);
}

// ************************************************************
// 	FILE WRITING
// ************************************************************

// tracepoint:syscalls:sys_enter_write
//     int __syscall_nr;
//     unsigned int fd;
//     const char * buf;
//     size_t count
tracepoint:syscalls:sys_enter_write
/ comm == "python" /
{
	@sys_writ_start[tid] = nsecs;
	@sys_writ_fd[tid] = args->fd; 
	@sys_writ_count[tid] = args->count;
}
tracepoint:syscalls:sys_exit_write
/ comm == "python" /
{
	$now = nsecs;
	$latency = $now - @sys_writ_start[tid];

	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-8s %-8d %-10d %-10d %-8d\n", 
		"write()",
		@sys_writ_fd[tid],
		@sys_writ_count[tid], 
		args->ret,
		$latency
	);

	delete(@sys_writ_start[tid]);
	delete(@sys_writ_fd[tid]);
	delete(@sys_writ_count[tid]);
}


// ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_write
/ comm == "python"/
{
    @vw_start[tid] = nsecs;
	@vw_buf[tid] = arg1;
	@vw_req[tid] = arg2;
	@vw_off[tid] = *arg3;
	@vw_fn[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}

kretprobe:vfs_write
/ @vw_start[tid] /
{
	$now = nsecs;
	$latency = $now - @vw_start[tid];
	
	printf("%lu ", $now);
	time("%H:%M:%S  ");
	printf("%-6d %-6d", pid, tid);

	printf("%-10s 0x%lx %-8d %-10d ", 
		"vfs_write()",
		@vw_buf[tid],
		@vw_off[tid],
		@vw_req[tid]
	);
	printf("%-10d %-10d %s\n", retval, $latency, @vw_fn[tid]);

	delete(@vw_start[tid]);
	delete(@vw_buf[tid]);
	delete(@vw_req[tid]);
	delete(@vw_off[tid]);
	delete(@vw_fn[tid]);
}


// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{

	clear(@sys_read_start);
	clear(@sys_read_fd);
	clear(@sys_read_count);

	clear(@sys_writ_start);
	clear(@sys_writ_fd);
	clear(@sys_writ_count);

	clear(@vr_start);
	clear(@vr_buf);
	clear(@vr_req);
	clear(@vr_off);
	clear(@vr_fn);

	clear(@vw_start);
	clear(@vw_buf);
	clear(@vw_req);
	clear(@vw_off);
	clear(@vw_fn);
}
