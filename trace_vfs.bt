#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>


BEGIN
{
	// 	printf("%-17s %-9s %-8s %-14s %-12s %-6s ", "TIMESTAMP", "TIME", "PID", "COMM", "FUNC", "LAT(ns)");
	// printf("%s\n", "FILENAME");
	printf("%-17s %-10s %-6s %-8s %-2s %s\n", "TIMESTAMP", "TIME", "PID", "COMM", "TYPE", "FILE");
}

// ************************************************************
// 	DIRECTORIES
// ************************************************************

// mkdir() syscall contains the full path
tracepoint:syscalls:sys_enter_mkdir
/ comm == "python" /
{
	@tmkdstart[tid] = nsecs;
	@tmkdpath[tid] = str(args->pathname);
}
tracepoint:syscalls:sys_exit_mkdir
/ @tmkdstart[tid] /
{	
	$now = nsecs;
	$latency = $now - @tmkdstart[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s %-10d %s\n",
		comm, "mkdir()", $latency, @tmkdpath[tid]);

	delete(@tmkdstart[tid]);
	delete(@tmkdpath[tid]);
}

//int vfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
kprobe:vfs_mkdir
/ comm == "python" /
{
	$dentry = (struct dentry *) arg1;
	@mkd_start[tid] = nsecs;
	@mkd_name[tid] = $dentry->d_name.name;
	@mkd_mode[tid] = arg2;
}
kretprobe:vfs_mkdir
/ @mkd_start[tid] /
{
	$now = nsecs;
	$latency = $now - @mkd_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-12s %-8lu %-10d %s\n",
		comm, "vfs_mkdir", @mkd_mode[tid], $latency, str(@mkd_name[tid]));

	delete(@mkd_start[tid]);
	delete(@mkd_name[tid]);
	delete(@mkd_mode[tid]);
}


// int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
kprobe:vfs_rmdir
/ comm == "python" /
{
	$dentry = (struct dentry *)arg2;
	@rmd_start[tid] = nsecs;
	@rmd_name[tid] = $dentry->d_name.name;
	@rmd_mode[tid] = arg3;
}
kretprobe:vfs_rmdir
/ @rmd_start[tid] /
{
	$now = nsecs;
	$latency = $now - @rmd_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-12s %-8lu %-10d %s\n",
			comm, "vfs_rmdir", @rmd_mode[tid], $latency, str(@rmd_name[tid]));

	delete(@rmd_start[tid]);
	delete(@rmd_name[tid]);
	delete(@rmd_mode[tid]);
}


// ************************************************************
// 	MMAP
// ************************************************************

//unsigned long do_mmap(struct file *file, unsigned long addr,
//			unsigned long len, unsigned long prot,
//			unsigned long flags, unsigned long pgoff,
//			unsigned long *populate, struct list_head *uf)

kprobe:do_mmap
/ comm == "python" /
{
	$file = (struct file *)arg0;
	@mm_filename[tid] = $file->f_path.dentry->d_name.name; 
	@mm_len[tid] = arg2;
	@mm_prot[tid] = arg3;
	@mm_flag[tid] = arg4;
}
kretprobe:do_mmap
/ @mm_filename[tid] /
{
	$now = nsecs;
	$latency = $now - @rmd_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-5s %-8d 0x%-4x 0x%-4x ", comm, "mmap", @mm_len[tid], @mm_prot[tid], @mm_flag[tid]);
	printf("0x%-12x %-10d %s\n", retval, $latency, str(@mm_filename[tid]));	

	delete(@mm_filename[tid]);
	delete(@mm_len[tid]);
	delete(@mm_prot[tid]);
	delete(@mm_flag[tid]);
}

// tracepoint:syscalls:sys_enter_munmap
//     int __syscall_nr;
//     unsigned long addr;
//     size_t len;
tracepoint:syscalls:sys_enter_munmap
/ comm == "python" /
{
	@mun_start[tid] = nsecs;
	@mun_addr[tid] = args->addr;
	@mun_len[tid] = args->len;
}
tracepoint:syscalls:sys_exit_munmap
/ @mun_start[tid] /
{
	$now = nsecs;
	$latency = $now - @mun_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s 0x%lx 0x%-8d %-10d\n", comm, "munmap", @mun_addr[tid], @mun_len[tid], $latency);
	
	delete(@mun_start[tid]);
	delete(@mun_addr[tid]);
	delete(@mun_len[tid]);
}


// ************************************************************
// 	FILE OPENING
// ************************************************************

// int openat(int dirfd, const char *pathname, int flags, mode_t mode);
// returns the fd
tracepoint:syscalls:sys_enter_openat
/ comm == "python" /
{
	@o_start[tid] = nsecs;
	@o_flags[tid] = args->flags;
	@o_fn[tid] = str(args->filename);
}
tracepoint:syscalls:sys_exit_openat
/@o_start[tid]/
{
	$now = nsecs;
	$latency = $now - @o_start[tid];
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-8s %-4d %-8x %-8d %s\n",
		comm,
		"openat()",
		args->ret,
		@o_flags[tid],
		$latency,
		@o_fn[tid]
	);

	delete(@o_start[tid]);
	delete(@o_flags[tid]);
	delete(@o_fn[tid]);
}

kprobe:vfs_open
/comm == "python"/
{
	@vo_start[tid] = nsecs;
	@vo_fn[tid] = str(((struct path *)arg0)->dentry->d_name.name);
}
kretprobe:vfs_open
/@vo_start[tid]/
{
	$now = nsecs;
	$latency = $now - @vo_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-14s %-12s %-8d %s\n",
		 comm,
		 "vfs_open",
		 $latency,
		 @vo_fn[tid]
	 );

	 delete(@vo_start[tid]);
	 delete(@vo_fn[tid]);
}


// ************************************************************
// 	FILE READING/WRITING
// ************************************************************

// ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_read
/ comm == "python"/
{
	@vr_start[tid] = nsecs;
	@vr_buf[tid] = arg1;
	@vr_req[tid] = arg2;
	@vr_off[tid] = *arg3;
	@vr_fn[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}
kretprobe:vfs_read
/ @vr_start[tid] /
{
	$now = nsecs;
	$latency = $now - @vr_start[tid];
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s 0x%lx %-10d %-8d ", 
		comm,
		"vfs_read",
		@vr_buf[tid],
		@vr_req[tid],
		@vr_off[tid]
		);

	printf("%-10d %-10d %s\n", 
		retval, $latency, @vr_fn[tid]);

	delete(@vr_start[tid]);
	delete(@vr_buf[tid]);
	delete(@vr_req[tid]);
	delete(@vr_off[tid]);
	delete(@vr_fn[tid]);
}

// ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_write
/ comm == "python"/
{
    @vw_start[tid] = nsecs;
	@vw_buf[tid] = arg1;
	@vw_req[tid] = arg2;
	@vw_off[tid] = *arg3;
	@vw_fn[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}
kretprobe:vfs_write
/ @vw_start[tid] /
{
	$now = nsecs;
	$latency = $now - @vw_start[tid];
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s 0x%lx %-10d %-8d ", 
		comm,
		"vfs_write",
		@vw_buf[tid],
		@vw_req[tid],
		@vw_off[tid]
	);
	printf("%-10d %-10d %s\n", retval, $latency, @vw_fn[tid]);

	delete(@vw_start[tid]);
	delete(@vw_buf[tid]);
	delete(@vw_req[tid]);
	delete(@vw_off[tid]);
	delete(@vw_fn[tid]);
}


// ************************************************************
// 	FILE CLOSING
// ************************************************************
// Note: Here we first catch the close() syscall, store the fd then
// add it to the printout of the filp_close() kernel functions.

//tracepoint:syscalls:sys_enter_close
//    int __syscall_nr;
//    unsigned int fd;
tracepoint:syscalls:sys_enter_close
/ comm == "python" /
{	
	@tc_start[tid] = nsecs;
	@closefd[tid] = args->fd;
}
tracepoint:syscalls:sys_exit_close
/ @tc_start[tid] /
{	
	$now = nsecs;
	$latency = $now - @tc_start[tid];
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s %-8d %-8d", 
		comm,
		"close()",
		@closefd[tid],
		$latency
	);

	delete(@tc_start[tid]);
}

// int filp_close(struct file *filp, fl_owner_t id)
kprobe:filp_close
/ @closefd[tid] /
{
	@c_start[tid] = nsecs;
	@c_fd[tid] = @closefd[tid];
	@c_fn[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
	// don't need this anymore
	delete(@closefd[tid]);
}
kretprobe:filp_close
/ @c_start[tid] /
{
	$now = nsecs;
	$latency = $now - @c_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-12s %-8d %-8d %s\n",
		comm,
		"fp_close",
		@c_fd[tid],
		$latency,
		@c_fn[tid]
	);

	delete(@c_start[tid]);
	delete(@c_fd[tid]);
	delete(@c_fn[tid]);
}


// ************************************************************
// 	FILE CREATION
// ************************************************************
// Note: It seems usually openat() with O_CREAT is called instead of these functions

tracepoint:syscalls:sys_enter_creat
/ comm == "python" /
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-16s %-5s %-5hu %s\n", 
		comm, "creat", args->mode, str(args->pathname));
}
//int vfs_create(struct user_namespace *mnt_userns, struct inode *dir,
//	       struct dentry *dentry, umode_t mode, bool want_excl)
//  * @mnt_userns:	user namespace of the mount the inode was found from
//  * @dir:	inode of @dentry
//  * @dentry:	pointer to dentry of the base directory
//  * @mode:	mode of the new file
//  * @want_excl:	whether the file must not yet exist
kprobe:vfs_create
/ comm == "python"/
{
	@cstart[tid] = nsecs;
	$dentry = (struct dentry *)arg2;
	@cfn[tid] = str($dentry->d_name.name);
	@cmod[tid] = arg3;
}
kretprobe:vfs_create
/@cstart[tid]/
{
	$now = nsecs;
	$latency = $now - @cstart[tid];
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-4s %-7d %-4d %-8d %s\n", 
		comm,
		"vfs_create",
		@cmod[tid],
		retval,
		$latency,
		@cfn[tid]
	);

	delete(@cstart[tid]);
	delete(@cmod[tid]);
	delete(@cfn[tid]);
}


// ************************************************************
// 	FILE DELETION
// ************************************************************

tracepoint:syscalls:sys_enter_unlink
/ comm == "python" /
{
	@unlnk_start[tid] = nsecs;
	@unlnk_fn[tid] = str(args->pathname);
}
tracepoint:syscalls:sys_enter_unlink
/ @unlnk_start[tid] /
{
	$now = nsecs;
	$latency = $now - @unlnk_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s %-8d %s\n", 
		comm, 
		"unlink()", 
		$latency,
		@unlnk_fn[tid]
	);

	delete(@unlnk_start[tid]);
	delete(@unlnk_fn[tid]);
}


kprobe:vfs_unlink
/ comm == "python" /
{
	@v_unlnk_start[tid] = nsecs;
	$dentry = (struct dentry *)arg1;
	@v_unlnk_fn[tid] = str($dentry->d_name.name);
}
kretprobe:vfs_unlink
/ @v_unlnk_start[tid] /
{
	$now = nsecs;
	$latency = $now - @unlnk_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s %-8d %s\n", 
		comm, 
		"vfs_unlink",
		$latency,
		@v_unlnk_fn[tid]
	);
	
	delete(@v_unlnk_start[tid]);
	delete(@v_unlnk_fn[tid]);
}


// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@tmkdstart);
	clear(@tmkdpath);

	clear(@mkd_start);
	clear(@mkd_name);
	clear(@mkd_mode);

	clear(@mm_filename);
	clear(@mm_len);
	clear(@mm_prot);
	clear(@mm_flag);

	clear(@mun_start);
	clear(@mun_addr);
	clear(@mun_len);

	clear(@o_start);
	clear(@o_flags);
	clear(@o_fn);

	clear(@vo_start);
	clear(@vo_fn);

	clear(@vr_start);
	clear(@vr_buf);
	clear(@vr_req);
	clear(@vr_off);
	clear(@vr_fn);

	clear(@vw_start);
	clear(@vw_buf);
	clear(@vw_req);
	clear(@vw_off);
	clear(@vw_fn);

	clear(@rmd_start);
	clear(@rmd_name);
	clear(@rmd_mode);

	clear(@tc_start);
	clear(@closefd);
	clear(@c_start);
	clear(@c_fd);
	clear(@c_fn);

	clear(@cstart);
	clear(@cmod);
	clear(@cfn);

	clear(@unlnk_start);
	clear(@unlnk_fn);
	clear(@v_unlnk_start);
	clear(@v_unlnk_fn);
}
