#include <linux/fs.h>
#include <linux/path.h>
#include <linux/dcache.h>
#include <linux/types.h>
#include <uapi/asm-generic/posix_types.h>


BEGIN
{
	printf("%-18s %-6s %-16s %-16s %-8s %-10s ", "TIMESTAMP", "PID", "COMM", "FUNC", "LAT (ns)", "REQ");
	printf("%-10s %s\n", "BYTES", "FILE");
}

kprobe:vfs_read
// Filter out programs that cause lots of useless output
/ comm != "snmpd" && comm != "df" && comm != "ps" && comm != "ls" && comm != "htop" && comm != "sshd" && comm != "bpftrace"/
{
	@start[tid] = nsecs;
	@req[tid] = arg2;
	@off[tid] = arg3;
	@filename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}


kretprobe:vfs_read
/@start[tid]/
{
	$now = nsecs;
	
	// One line for pretty printing, one line for minimizing output size
	//printf("%lu %d %s %s %d %d ", 
	printf("%-18lu %-6d %-16s %-16s %-8d %-10d ", 
		$now, 
		pid,
		comm,
		"vfs_read",
		$now - @start[tid],
		@req[tid]);

	//printf("%d %s\n", retval, @filename[tid]);
	printf("%-10d %s\n", retval, @filename[tid]);

	delete(@start[tid]);
	delete(@req[tid]);
	delete(@off[tid]);
	delete(@filename[tid]);
}



kprobe:vfs_write
/ comm != "snmpd" && comm != "df" && comm != "ps" && comm != "ls" && comm != "htop" && comm != "sshd" && comm != "bpftrace"/
{
    @wstart[tid] = nsecs;
	@wreq[tid] = arg2;
	@woff[tid] = arg3;
	@wfilename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}

kretprobe:vfs_write
/@wstart[tid]/
{
    $now = nsecs;
	
	//printf("%lu %d %s %s %d %d ",
	printf("%-18lu %-6d %-16s %-16s %-8d %-10d ",
		$now,
		pid,
		comm,
		"vfs_write",
		$now - @wstart[tid],
		@wreq[tid]);

	//printf("%d %s\n", retval, @wfilename[tid]);
	printf("%-10d %s\n", retval, @wfilename[tid]);

	delete(@wstart[tid]);
	delete(@wreq[tid]);
	delete(@woff[tid]);
	delete(@wfilename[tid]);
}


END 
{
    clear(@start);
	clear(@req);
	clear(@off);
	clear(@filename);

	clear(@wstart);
	clear(@wreq);
	clear(@woff);
	clear(@wfilename);		
}
