#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>


BEGIN
{
	printf("%-17s %-10s %-6s %-8s %-2s %s\n", "TIMESTAMP", "TIME", "PID", "COMM", "TYPE", "FILE");
}

// ************************************************************
// 	DIRECTORIES
// ************************************************************

tracepoint:syscalls:sys_enter_mkdirat
/ comm == "python" /
{
	printf("enter_mkdirat %s\n", str(args->pathname));
}
tracepoint:syscalls:sys_exit_mkdirat
/ comm == "python" /
{
        printf("exit_mkdirat\n");
}
tracepoint:syscalls:sys_enter_mkdir
/ comm == "python" /
{
        printf("enter_mkdir %s\n", str(args->pathname));
}
tracepoint:syscalls:sys_exit_mkdir
/ comm == "python" /
{
        printf("exit_mkdir\n");
}

//int vfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
kprobe:vfs_mkdir
/ comm == "python" /
{
	$dentry = (struct dentry *)arg1;
	@mkd_start[tid] = nsecs;
	@mkd_name[tid] = $dentry->d_name.name;
	@mkd_mode[tid] = arg2;
}
kretprobe:vfs_mkdir
/ @mkd_start[tid] /
{
	$now = nsecs;

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");

	printf("%-8d %-8d", pid, tid);
	printf("%-8s %-12s %-10d %-8lu %s\n",
		comm, "vfs_mkdir", $now - @mkd_start[tid], @mkd_mode[tid], str(@mkd_name[tid]));

	delete(@mkd_start[tid]);
	delete(@mkd_name[tid]);
	delete(@mkd_mode[tid]);
}


// int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
kprobe:vfs_rmdir
/ comm == "python" /
{
	$dentry = (struct dentry *)arg2;
	@rmd_start[tid] = nsecs;
	@rmd_name[tid] = $dentry->d_name.name;
	@rmd_mode[tid] = arg3;
}
kretprobe:vfs_rmdir
/ @rmd_start[tid] /
{
	$now = nsecs;

	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-12s %-10d %-8lu %s\n",
			comm, "vfs_rmdir", $now - @rmd_start[tid], @rmd_mode[tid], str(@rmd_name[tid]));

	delete(@rmd_start[tid]);
	delete(@rmd_name[tid]);
	delete(@rmd_mode[tid]);
}


// ************************************************************
// 	MMAP
// ************************************************************

//unsigned long do_mmap(struct file *file, unsigned long addr,
//			unsigned long len, unsigned long prot,
//			unsigned long flags, unsigned long pgoff,
//			unsigned long *populate, struct list_head *uf)

kprobe:do_mmap
/ comm == "python" /
{
	$file = (struct file *)arg0;
	@mm_filename[tid] = $file->f_path.dentry->d_name.name; 
	@mm_len[tid] = arg2;
	@mm_prot[tid] = arg3;
	@mm_flag[tid] = arg4;
}
kretprobe:do_mmap
/ @mm_filename[tid] /
{
        printf("%-17lu ", nsecs);
        time("%H:%M:%S  ");
        printf("%-8d %-8d", pid, tid);

        printf("%-8s %-5s %-8d 0x%x 0x%x ", comm, "mmap", @mm_len[tid], @mm_prot[tid], @mm_flag[tid]);
        printf("0x%-12x %s\n", retval, str(@mm_filename[tid]));	

	delete(@mm_filename[tid]);
	delete(@mm_len[tid]);
	delete(@mm_prot[tid]);
	delete(@mm_flag[tid]);
}
	

// ************************************************************
// 	FILE OPENING
// ************************************************************

tracepoint:syscalls:sys_enter_openat
/ comm == "python" /
{
	@start[tid] = nsecs;
	@dfd[tid] = args->dfd;
	@flags[tid] = args->flags;
	@fn[tid] = args->filename;
}

tracepoint:syscalls:sys_exit_openat
/@fn[tid]/
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-5s %-4d %-8x %s\n",
		comm,
		"openat",
		args->ret,
		@flags[tid],
		str(@fn[tid])
	);

	delete(@flags[tid]);
	delete(@dfd[tid]);
	delete(@fn[tid]);
}


// ************************************************************
// 	FILE READING/WRITING
// ************************************************************

// ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_read
/ comm == "python"/
{
	@start[tid] = nsecs;
	@buf[tid] = arg1;
	@req[tid] = arg2;
	@off[tid] = arg3;
	@filename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}
kretprobe:vfs_read
/@start[tid]/
{
	$now = nsecs;
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-14s %-10s 0x%-12x %-10d %-8d ", 
		comm,
		"vfs_read",
		@buf[tid],
		@req[tid],
		// $now - @start[tid],
		@off[tid]
		);

	printf("%-10d %s\n", retval, @filename[tid]);

	delete(@start[tid]);
	delete(@req[tid]);
	delete(@off[tid]);
	delete(@filename[tid]);
}

// ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_write
/ comm == "python"/
{
    @wstart[tid] = nsecs;
	@wbuf[tid] = arg1;
	@wreq[tid] = arg2;
	@woff[tid] = arg3;
	@wfilename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}
kretprobe:vfs_write
/@wstart[tid]/
{
    $now = nsecs;
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-14s %-10s 0x%-12x %-10d %-8d ", 
		comm,
		"vfs_write",
		@wbuf[tid],
		@woff[tid],
		// $now - @wstart[tid],
		@wreq[tid]
	);

	printf("%-10d %s\n", retval, @wfilename[tid]);

	delete(@wstart[tid]);
	delete(@wreq[tid]);
	delete(@woff[tid]);
	delete(@wfilename[tid]);
}


// ************************************************************
// 	FILE CLOSING
// ************************************************************

//tracepoint:syscalls:sys_enter_close
//    int __syscall_nr;
//    unsigned int fd;

tracepoint:syscalls:sys_enter_close
/ comm == "python" /
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s close(fd=%d)\n",
		comm,
		args->fd
	);
}
// int filp_close(struct file *filp, fl_owner_t id)
kprobe:filp_close
/ comm == "python" /
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-12s %s\n",
		comm,
		"fp_close",
		str(((struct file *)arg0)->f_path.dentry->d_name.name)
	);
}



// ************************************************************
// 	FILE CREATION
// ************************************************************
// Note: It seems usually openat() with O_CREAT is called instead of these functions

tracepoint:syscalls:sys_enter_creat
/ comm == "python" /
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-16s %-5s %-5hu %s\n", 
		comm, "creat", args->mode, str(args->pathname));
}
//int vfs_create(struct user_namespace *mnt_userns, struct inode *dir,
//	       struct dentry *dentry, umode_t mode, bool want_excl)
//  * @mnt_userns:	user namespace of the mount the inode was found from
//  * @dir:	inode of @dentry
//  * @dentry:	pointer to dentry of the base directory
//  * @mode:	mode of the new file
//  * @want_excl:	whether the file must not yet exist
kprobe:vfs_create
/ comm == "python"/
{
	@cstart[tid] = nsecs;
	$dentry = (struct dentry *)arg2;
	@cfn[tid] = str($dentry->d_name.name);
	@cmod[tid] = arg3;
}
kretprobe:vfs_create
/@cstart[tid]/
{
	$now = nsecs;
	
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-4s %-7d ", 
		comm,
		"vfs_create",
		@cmod[tid]);

	printf("%-10d %s\n", retval, @cfn[tid]);

	delete(@cstart[tid]);
	delete(@cfn[tid]);
	delete(@cmod[tid]);
}


// ************************************************************
// 	FILE DELETION
// ************************************************************

tracepoint:syscalls:sys_enter_unlinkat
/ comm == "python" /
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-10s %-5hu %s\n", 
		comm, "unlinkat", args->dfd, str(args->pathname));
}
tracepoint:syscalls:sys_enter_unlink
/ comm == "python" /
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	printf("%-8s %-8s %s\n", 
		comm, "unlink", str(args->pathname));
}
kprobe:vfs_unlink
/ comm == "python" /
{
	printf("%-17lu ", nsecs);
	time("%H:%M:%S  ");
	printf("%-8d %-8d", pid, tid);

	$dentry = (struct dentry *)arg1;
	
	printf("%-8s %-10s %s\n", 
		comm, "vfs_unlink",
		str($dentry->d_name.name));
}




// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@mm_filename);
	clear(@mm_len);
	clear(@mm_prot);
	clear(@mm_flag);

	clear(@flags);
	clear(@dfd);
	clear(@fn);

	clear(@rmd_start);
	clear(@rmd_name);
	clear(@rmd_mode);

	clear(@mkd_start);
	clear(@mkd_name);
	clear(@mkd_mode);

	clear(@start);
	clear(@req);
	clear(@buf);
	clear(@off);
	clear(@filename);

	clear(@wstart);
	clear(@wreq);
	clear(@wbuf);
	clear(@woff);
	clear(@wfilename);		
}
