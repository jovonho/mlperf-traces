#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>


BEGIN
{
	// openat() format
	printf("openat():\n");
	printf("%-17s %-8s %-6s %-6s %-10s %-4s ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "FD");
	printf("%-8s %-8s %-8s %s %s\n", "FLAGS", "MODE", "LAT(ns)", "FILENAME", "FULLPATH");

	// close() format
	printf("close():\n");
	printf("%-17s %-8s %-6s %-6s %-10s %-4s ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "FD");
	printf("%-8s %s\n", "LAT(ns)", "FILENAME");
}

// ************************************************************
// 	FILE OPENING
// ************************************************************

// tracepoint:syscalls:sys_enter_openat
//     int __syscall_nr;
//     int dfd;
//     const char * filename;
//     int flags;
//     umode_t mode;
tracepoint:syscalls:sys_enter_openat	
/ comm == "python" /
{
	@o_start[tid] = nsecs;
	@o_flags[tid] = args->flags;
	@o_mode[tid] = args->mode;
	@o_fullpath[tid] = str(args->filename);
}

// int vfs_open(const struct path *path, struct file *file)
kprobe:vfs_open
/ @o_start[tid] /
{
	@o_filename[tid] = str(((struct path *)arg0)->dentry->d_name.name);
}

tracepoint:syscalls:sys_exit_openat
/ @o_start[tid] /
{
	$now = nsecs;
	$latency = $now - @o_start[tid];
	printf("%-17lu ", $now);
	time("%H:%M:%S ");
	printf("%-6d %-6d ", pid, tid);

	printf("%-10s %-4d %-8x %-8hu %-8d ",
		"openat()",
		args->ret,			// the file descriptor
		@o_flags[tid],
		@o_mode[tid],
		$latency
	);

	printf("%s %s\n",
		@o_filename[tid],
		@o_fullpath[tid]
	);

	delete(@o_start[tid]);
	delete(@o_flags[tid]);
	delete(@o_mode[tid]);
	delete(@o_filename[tid]);
	delete(@o_fullpath[tid]);
}

// ************************************************************
// 	FILE CLOSING
// ************************************************************
// Note: Here we first catch the close() syscall, store the fd then
// add it to the printout of the filp_close() kernel functions.

//tracepoint:syscalls:sys_enter_close
//    int __syscall_nr;
//    unsigned int fd;
tracepoint:syscalls:sys_enter_close
/ comm == "python" /
{	
	@c_start[tid] = nsecs;
	@c_fd[tid] = args->fd;
}
// int filp_close(struct file *filp, fl_owner_t id)
kprobe:filp_close
/ @c_start[tid] /
{
	@c_filename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}

tracepoint:syscalls:sys_exit_close
/ @c_start[tid] /
{	
	$now = nsecs;
	$latency = $now - @c_start[tid];
	
	printf("%-17lu ", $now);
	time("%H:%M:%S ");
	printf("%-6d %-6d ", pid, tid);

	printf("%-10s %-5d %-8d %s\n", 
		"close()",
		@c_fd[tid],
		$latency,
		@c_filename[tid]
	);

	delete(@c_start[tid]);
	delete(@c_fd[tid]);
	delete(@c_filename[tid]);
}


// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@o_start);
	clear(@o_flags);
	clear(@o_mode);
	clear(@o_fullpath);
	clear(@o_filename);

	clear(@c_start);
	clear(@c_fd);
	clear(@c_filename);

}
