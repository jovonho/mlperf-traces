#!/usr/bin/env bpftrace

#include <linux/blkdev.h>

/*
 * biosnoop.bt   Block I/O tracing tool, showing per I/O latency.
 *               For Linux, uses bpftrace, eBPF.
 *
 * TODO: switch to block tracepoints. Add device, offset, and size columns.
 *
 * This is a bpftrace version of the bcc tool of the same name.
 *
 * 15-Nov-2017	Brendan Gregg	Created this.
 */

BEGIN
{
	printf("%-17s %-9s %-8s %-14s %-8s %-14s ", "TIMESTAMP", "TIME", "PID", "COMM", "DONEPID", "DONECOMM");
	printf("%-4s %-1s %-16s %-12s %s\n", "DISK", "T", "SECTOR", "BYTES", "LAT(ns)");
}

kprobe:blk_account_io_start
/comm == "python"/
{
	@start[arg0] = nsecs;
	@iopid[arg0] = pid;
	@iocomm[arg0] = comm;
	@disk[arg0] = ((struct request *)arg0)->rq_disk->disk_name;
	@rw[arg0] = (((struct request *)arg0)->cmd_flags & 255) == 1 ? "W" : "R";
	@sector[arg0] = ((struct request *)arg0)->__sector;
	@len[arg0] =  ((struct request *)arg0)->__data_len;
}

kprobe:blk_account_io_done
/@disk[arg0] == "xvda" && @start[arg0] != 0 && @iopid[arg0] != 0 && @iocomm[arg0] != ""/
{
	$now = nsecs;
	
	printf("%-17lu ", $now);
	
	time("%H:%M:%S  ");

	printf("%-8d %-14s %-8d %-14s %-4s ",	    
		@iopid[arg0], 
		@iocomm[arg0], 
		pid,
		comm,
		@disk[arg0] 
	);

	printf("%-1s %-16llu %-12u %d\n", @rw[arg0], @sector[arg0], @len[arg0], ($now - @start[arg0]));

	delete(@start[arg0]);
	delete(@iopid[arg0]);
	delete(@iocomm[arg0]);
	delete(@disk[arg0]);
	delete(@rw[arg0]);
	delete(@sector[arg0]);
	delete(@len[arg0]);
}

END
{
	clear(@start);
	clear(@iopid);
	clear(@iocomm);
	clear(@disk);
	clear(@rw);
	clear(@sector);
	clear(@len);
}
