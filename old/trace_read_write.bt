#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>


BEGIN
{
	printf("%-17s %-8s %-6s %-6s %-10s %-4s ", "TIMESTAMP", "TIME", "PID", "TID", "FUNCTION", "FD");
	printf("%-13s %-8s %-10s %-10s %-8s\n", "BUFFER ADDRESS", "OFFSET", "REQ (B)", "RET (B)", "LAT(ns)");
}


// ************************************************************
// 	FILE READING
// ************************************************************

// We time the syscall but fetch some extra info from the vfs function

// tracepoint:syscalls:sys_enter_read
//     int __syscall_nr;
//     unsigned int fd;
//     char * buf;
//     size_t count;
tracepoint:syscalls:sys_enter_read
/ comm == "python" /
{
	@read_start[tid] = nsecs;
	@read_fd[tid] = args->fd; 
	@requested[tid] = args->count;
}
// ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_read
/ @read_start[tid] /
{
	@address[tid] = arg1;
	@offset[tid] = *arg3;
	@filename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}

// tracepoint:syscalls:sys_exit_read
//     int __syscall_nr;
//     long ret;
tracepoint:syscalls:sys_exit_read
/ @read_start[tid] /
{
	$now = nsecs;
	$latency = $now - @read_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S ");
	printf("%-6d %-6d ", pid, tid);

	printf("%-10s %-4d 0x%-13lx %-8d %-10d ", 
		"read()",
		@read_fd[tid],
		@address[tid],
		@offset[tid],
		@requested[tid]
	);

	printf("%-10d %-10d %s\n", 
		args->ret, 			// number of bytes returned
		$latency, 
		@filename[tid]);

	delete(@read_start[tid]);
	delete(@read_fd[tid]);
	delete(@address[tid]);
	delete(@offset[tid]);
	delete(@requested[tid]);
	delete(@filename[tid]);
}


// ************************************************************
// 	FILE WRITING
// ************************************************************

// tracepoint:syscalls:sys_enter_write
//     int __syscall_nr;
//     unsigned int fd;
//     const char * buf;
//     size_t count
tracepoint:syscalls:sys_enter_write
/ comm == "python" /
{
	@write_start[tid] = nsecs;
	@write_fd[tid] = args->fd; 
	@write_requested[tid] = args->count;
}

// ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
kprobe:vfs_write
/ @write_start[tid] /
{
	@write_address[tid] = arg1;
	@write_offset[tid] = *arg3;
	@write_filename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}

tracepoint:syscalls:sys_exit_write
/ @write_start[tid] /
{
	$now = nsecs;
	$latency = $now - @write_start[tid];

	printf("%-17lu ", $now);
	time("%H:%M:%S ");
	printf("%-6d %-6d ", pid, tid);

	printf("%-10s %-4d 0x%-13lx %-8d %-10d ", 
		"write()",
		@write_fd[tid],
		@write_address[tid],
		@write_offset[tid],
		@write_requested[tid]
	);
	printf("%-10d %-10d %s\n", 
		args->ret, 
		$latency, 
		@write_filename[tid]
	);

	delete(@write_start[tid]);
	delete(@write_fd[tid]);
	delete(@write_address[tid]);
	delete(@write_offset[tid]);
	delete(@write_requested[tid]);
	delete(@write_filename[tid]);
}


// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@read_start);
	clear(@read_fd);
	clear(@address);
	clear(@offset);
	clear(@requested);
	clear(@filename);

	clear(@write_start);
	clear(@write_fd);
	clear(@write_address);
	clear(@write_offset);
	clear(@write_requested);
	clear(@write_filename);
}
