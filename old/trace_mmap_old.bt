#!/usr/local/bin/bpftrace

#include <linux/fs.h>
#include <linux/mm.h>

BEGIN
{
	printf("mmap():\n");
	printf("%-17s %-8s %-6s %-6s %-10s %-4s", "TIMESTAMP", "TID", "FD");
	printf("%-13s %-13s %-8s %-4s %-4s %-8s ", "ADDRESS", "HINT ADDR", "LEN", "PROT", "FLAGS", "LAT(ns)");
	printf("%s\n", "FILENAME");

	printf("munmap():\n");
	printf("%-17s %-8s %-6s %-6s %-10s %-13s %-8s %-8s\n", "TIMESTAMP", "TID", "ADDRESS", "LEN", "LAT(ns)");
}

// ************************************************************
// 	MMAP
// ************************************************************

// tracepoint:syscalls:sys_enter_mmap
//     int __syscall_nr;
//     unsigned long addr;
//     unsigned long len;
//     unsigned long prot;
//     unsigned long flags;
//     unsigned long fd;
//     unsigned long off;
tracepoint:syscalls:sys_enter_mmap
/ comm == "python" /
{
	@mm_start[tid] = nsecs;
	@mm_hint[tid] = args->addr;		// Suggested address
	@mm_len[tid] = args->len;
	@mm_prot[tid] = args->prot;
	@mm_flags[tid] = args->flags;
	@mm_fd[tid] = args->fd;
	@mm_off[tid] = args->off;
}
//unsigned long do_mmap(struct file *file, unsigned long addr,
//			unsigned long len, unsigned long prot,
//			unsigned long flags, unsigned long pgoff,
//			unsigned long *populate, struct list_head *uf)
kprobe:do_mmap
/ @mm_start[tid] /
{
	$file = (struct file *)arg0;
	@mm_filename[tid] = str($file->f_path.dentry->d_name.name); 
}

tracepoint:syscalls:sys_exit_mmap
/ @mm_start[tid] /
{
	$now = nsecs;
	$latency = $now - @mm_start[tid];
	$addr = args->ret;						// Actual address

	printf("%-17lu %-4d 0x%lx 0x%lx %-8d ", 
		$now,
		@mm_fd[tid],
		$addr, 		
		@mm_hint[tid],
		@mm_len[tid]
	);

	printf("0x%-4x 0x%-4x %-8d %s\n", 
		@mm_prot[tid],
		@mm_flags[tid],
		$latency, 
		@mm_filename[tid]
	);	

	delete(@mm_start[tid]);
	delete(@mm_hint[tid]);
	delete(@mm_len[tid]);
	delete(@mm_prot[tid]);
	delete(@mm_flags[tid]);
	delete(@mm_fd[tid]);
	delete(@mm_off[tid]);
}


// ************************************************************
// 	MUNMAP
// ************************************************************
// do_munmap() doesn't have a lot of info so we'll just trace the syscall here

// tracepoint:syscalls:sys_enter_munmap
//     int __syscall_nr;
//     unsigned long addr;
//     size_t len;
tracepoint:syscalls:sys_enter_munmap
/ comm == "python" /
{
	@mun_start[tid] = nsecs;
	@mun_addr[tid] = args->addr;
	@mun_len[tid] = args->len;
}
tracepoint:syscalls:sys_exit_munmap
/ @mun_start[tid] /
{
	$now = nsecs;
	$latency = $now - @mun_start[tid];

	printf("%-17lu %-6d 0x%lx %-8d %-8d\n", 
		$now,
		tid,
		@mun_addr[tid], 
		@mun_len[tid], 
		$latency
	);
	
	delete(@mun_start[tid]);
	delete(@mun_addr[tid]);
	delete(@mun_len[tid]);
}


// ************************************************************
// 	CLEANUP
// ************************************************************
END 
{
	clear(@mm_start);
	clear(@mm_hint);
	clear(@mm_len);
	clear(@mm_prot);
	clear(@mm_flags);
	clear(@mm_fd);
	clear(@mm_off);

	clear(@mun_start);
	clear(@mun_addr);
	clear(@mun_len);
}
